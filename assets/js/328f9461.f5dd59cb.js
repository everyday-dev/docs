"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2401],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(a),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(7462),r=a(7294),o=a(6010),i=a(2466),l=a(6550),s=a(1980),u=a(7392),p=a(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function k(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=c(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[s,u]=h({queryString:a,groupId:n}),[d,k]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,p.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),g=(()=>{const e=s??d;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),k(e)}),[u,k,o]),tabValues:o}}var g=a(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:l,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),c=e=>{const t=e.currentTarget,a=p.indexOf(t),n=u[a].value;n!==l&&(d(t),s(n))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:c},i,{className:(0,o.Z)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":l===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f.tabList)},r.createElement(b,(0,n.Z)({},e,t)),r.createElement(v,(0,n.Z)({},e,t)))}function N(e){const t=(0,g.Z)();return r.createElement(y,(0,n.Z)({key:String(t)},e))}},6480:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),o=a(4866),i=a(5162);const l={title:"avr-cmake-template",sidebar_position:1,slug:"/avr-cmake-template",keywords:["avr","cmake","template","bare-metal","dfu","ceedling","cicd","unit-testing","c"],description:"Template project for building AVR based firmware using VScode, CMake and the AVR toolchain"},s=void 0,u={unversionedId:"templates/avr-cmake-template/avr-cmake-template",id:"templates/avr-cmake-template/avr-cmake-template",title:"avr-cmake-template",description:"Template project for building AVR based firmware using VScode, CMake and the AVR toolchain",source:"@site/docs/templates/avr-cmake-template/avr-cmake-template.mdx",sourceDirName:"templates/avr-cmake-template",slug:"/avr-cmake-template",permalink:"/docs/avr-cmake-template",draft:!1,editUrl:"https://github.com/everyday-dev/opensource/tree/main/docs/templates/avr-cmake-template/avr-cmake-template.mdx",tags:[],version:"current",lastUpdatedBy:"stephendpmurphy",lastUpdatedAt:1687291082,formattedLastUpdatedAt:"Jun 20, 2023",sidebarPosition:1,frontMatter:{title:"avr-cmake-template",sidebar_position:1,slug:"/avr-cmake-template",keywords:["avr","cmake","template","bare-metal","dfu","ceedling","cicd","unit-testing","c"],description:"Template project for building AVR based firmware using VScode, CMake and the AVR toolchain"},sidebar:"sidebar",previous:{title:"\ud83c\udfd7\ufe0f Templates",permalink:"/docs/templates"},next:{title:"kicad-project-template",permalink:"/docs/kicad-project-template"}},p={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Tools Setup",id:"tools-setup",level:2},{value:"Required",id:"required",level:3},{value:"Nice to have",id:"nice-to-have",level:3},{value:"CMake Project Configuration",id:"cmake-project-configuration",level:2},{value:"Adding new source files via <strong>Ceedling</strong>",id:"adding-new-source-files-via-ceedling",level:2},{value:"Initial Build Setup",id:"initial-build-setup",level:2},{value:"Compiling, Flashing &amp; Testing",id:"compiling-flashing--testing",level:2},{value:"Compiling",id:"compiling",level:4},{value:"Flashing",id:"flashing",level:4},{value:"Fuses",id:"fuses",level:4},{value:"Testing",id:"testing",level:4},{value:"Continuous Integration/Deployment",id:"continuous-integrationdeployment",level:2}],c={toc:d},m="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The AVR & CMake Template is great for getting up and going fast when building AVR based firmware using VScode, CMake and the AVR toolchain. Not only does this template provides you with the\nability to build and flash AVR based firmware, it also provides unit testing capabilites via Ceedling and CI/CD support using Github Workflows."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The template can be found on Github in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/everyday-dev/avr-cmake-template"},"avr-cmake-template")," repository")),(0,r.kt)("h2",{id:"tools-setup"},"Tools Setup"),(0,r.kt)("p",null,"There are a handful of tools needed to use this template. Several are required such as the AVR toolchains and tools like the Ceedling unit testing framework are not necessarily required.\nWe will outline the install of the required and nice to have tools in seperate steps."),(0,r.kt)("h3",{id:"required"},"Required"),(0,r.kt)("p",null,"At a minium we need to install the following tools to compile AVR executable artifacts. This template is tested at the latest version of each tool and YMMV when using older versions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.microchip.com/en-us/tools-resources/develop/microchip-studio/gcc-compilers"},"avr-gcc / avr-libc")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.gnu.org/software/make/manual/make.html"},"make")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://cmake.org/download/"},"CMake"))),(0,r.kt)("p",null,"Execute these install steps for your respective OS."),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"ubuntu",label:"Ubuntu",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"sudo apt install avr-gcc avr-libc make cmake\n"))),(0,r.kt)(i.Z,{value:"windows",label:"Windows",mdxType:"TabItem"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"These instructions must be run in a ",(0,r.kt)("inlineCode",{parentName:"p"},"cmd.exe")," command prompt. The\nrequired commands differ on PowerShell.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.chocolatey.org/en-us/choco/setup"},"Install the ",(0,r.kt)("inlineCode",{parentName:"a"},"choco")," package manager")," for Windows"),(0,r.kt)("li",{parentName:"ul"},"Open a ",(0,r.kt)("inlineCode",{parentName:"li"},"cmd.exe")," window as ",(0,r.kt)("strong",{parentName:"li"},"Administrator"),'. To do so, press the Windows key, type "cmd.exe", right-click the result, and choose ',(0,r.kt)("strong",{parentName:"li"},"Run as Administrator"),"."),(0,r.kt)("li",{parentName:"ul"},"Now install the needed dependencies")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"    choco install make\n    choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install the ",(0,r.kt)("inlineCode",{parentName:"li"},"avr-gcc")," toolchain provided on the ",(0,r.kt)("a",{parentName:"li",href:"https://www.microchip.com/en-us/tools-resources/develop/microchip-studio/gcc-compilers"},"Microchip site"),". Once extracted add the\n",(0,r.kt)("inlineCode",{parentName:"li"},"bin")," folder path to your Path environment variable. For more information on adding an app to your path, check out this ",(0,r.kt)("a",{parentName:"li",href:"/blog/2023/1/7/adding-apps-to-path-var"},"blog post"))))),(0,r.kt)("h3",{id:"nice-to-have"},"Nice to have"),(0,r.kt)("p",null,"A handful of nice to have tools can be added to give the ability to flash a microcontroller via a standard prog interface or USB DFU, execute unit-tests against the end users application,\nand integrate CI/CD via Github workflows."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/avrdudes/avrdude"},"avrdude"),": Program your AVR chip via JTAG, SPI, debugWIRE, PDI, etc"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dfu-programmer.github.io/"},"dfu-programmer"),": Program your AVR chip using a built-in USB DFU bootloader"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.ruby-lang.org"},"Ruby"),": Needed to install and execute the ",(0,r.kt)("inlineCode",{parentName:"li"},"ceedling")," gem for Unit Testing"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://www.throwtheswitch.org/ceedling"},"Ceedling"),": Unit testing framework consisting of Unity & CMock"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.python.org/downloads/"},"Python"),": Needed to install the ",(0,r.kt)("inlineCode",{parentName:"li"},"gcovr")," package"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gcovr.com/en/stable/"},"gcovr"),": Generate pretty and useful to use HTML based reports of your unit testing coverage and results")),(0,r.kt)("p",null,"Execute these install steps for your respective OS."),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"ubuntu",label:"Ubuntu",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"sudo apt install avrdude ruby\nsudo gem install ceedling\npython -m pip install gcovr\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Download ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dfu-programmer/dfu-programmer/releases/tag/v1.0.0"},"dfu-programmer")," from the ",(0,r.kt)("inlineCode",{parentName:"li"},".tar.gz")," provided in the Releases section. Once extracted add it to your\n",(0,r.kt)("inlineCode",{parentName:"li"},"PATH")," env. variable. For more information on adding an app to your path, check out this ",(0,r.kt)("a",{parentName:"li",href:"/blog/2023/1/7/adding-apps-to-path-var"},"blog post")))),(0,r.kt)(i.Z,{value:"windows",label:"Windows",mdxType:"TabItem"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"  These instructions must be run in a ",(0,r.kt)("inlineCode",{parentName:"p"},"cmd.exe")," command prompt. The\nrequired commands differ on PowerShell.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open a ",(0,r.kt)("inlineCode",{parentName:"li"},"cmd.exe")," window as ",(0,r.kt)("strong",{parentName:"li"},"Administrator"),'. To do so, press the Windows key, type "cmd.exe", right-click the result, and choose ',(0,r.kt)("strong",{parentName:"li"},"Run as Administrator"),"."),(0,r.kt)("li",{parentName:"ul"},"Install the Python and Ruby choco packages")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"choco install python ruby\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Close the termainal and open a new one as an Administrator and then execute the following")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"gem install ceedling\npython -m pip install gcovr\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Download ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dfu-programmer/dfu-programmer/releases/tag/v1.0.0"},"dfu-programmer")," from the ",(0,r.kt)("inlineCode",{parentName:"li"},"x86")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"x64")," zip files provided in the Releases section. Once\nextracted add it to your ",(0,r.kt)("inlineCode",{parentName:"li"},"PATH")," env. variable. For more information on adding an app to your path, check out this ",(0,r.kt)("a",{parentName:"li",href:"/blog/2023/1/7/adding-apps-to-path-var"},"blog post"))))),(0,r.kt)("p",null,"With the required tools installed you're ready to start editing the CMake project to be specific to your application/microcontroller!"),(0,r.kt)("h2",{id:"cmake-project-configuration"},"CMake Project Configuration"),(0,r.kt)("p",null,"The template comes with a ",(0,r.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file already filled out but the user should edit these variables as necessary for their\nproject. Within the CMake file there is a comment header at the beginning and ending of the variables you are to edit. Do not\nedit anything outside of the headers as you could break the template."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CMake"},"#####################################################################################\n# Set our project and CPU specific flags, options, definitions and Linker Settings\n#####################################################################################\n\n...\n\n#####################################################################################\n# End of project and CPU specific items - DO NOT EDIT ANYTING BELOW THIS POINT\n#####################################################################################\n\n")),(0,r.kt)("p",null,"A list and description of these variables you should update are below."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"PRODUCT_NAME"),": This will be the name of the final executable e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"PRODUCT_NAME.hex")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MCU"),": This is the part number of the AVR MCU you are using. The compiler expects a certain string for each part. Consult\n",(0,r.kt)("a",{parentName:"li",href:"https://gcc.gnu.org/onlinedocs/gcc/AVR-Options.html"},"this list")," of AVR options to ensure you use the correct PN#"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"PROG_TYPE"),": This specifies the programmer type you intend to use if programming via JTAG, ISP, PDI etc. Available programmers/strings\ncan be found executing ",(0,r.kt)("inlineCode",{parentName:"li"},"avrdude -c help")," from the command line (This assumes you have installed ",(0,r.kt)("inlineCode",{parentName:"li"},"avrdude")," on your machine)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"COMPILE_OPTIONS"),": These are a list of the compiler options you wish to use. Most applications the default compiler options can be left\nas is, however the user may need to add or remove options as needed. You can also use the compiler options to add definitions via the ",(0,r.kt)("inlineCode",{parentName:"li"},"-D"),"\nflag. Note that the ",(0,r.kt)("inlineCode",{parentName:"li"},"-DF_CPU")," flag has been set and should be updated to your MCUs core clock frequency."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"LINKER_FLAGS"),": Here you can add or remove any additional linker flags needed for your application"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"LINKER_STATIC_LIBRARIES"),": If you are integrating any static libraries (",(0,r.kt)("inlineCode",{parentName:"li"},"*.a"),") from a vendor or other developer, you can specify them here\nso your final application will be linked against them."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"}," *_FUSE_VAL "),": The ",(0,r.kt)("a",{parentName:"li",href:"https://www.engbedded.com/fusecalc/"},"AVR Fuse Calculator")," is a great resource for determining what your fuse values should be for a given application.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"LOW_FUSE_VAL"),": Value you would like to write into the LOW fuse"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HIGH_FUSE_VAL"),": Value you would like to write into the HIGH fuse"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"EXTENDED_FUSE_VAL"),": Value you would like to write into the EXTENDED fuse"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"APP_SRC"),": Here you would specify a list of your applications source and board files"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"INCLUDE_DIRS"),": This is a list of directories you wish to include into the compiler and linker search paths"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CMAKE_SUBDIRS"),": If you have any dependency projects that are CMake based and you would like to include them into your build, you would\nspecify a path to their location here."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"VENDOR_SRC"),": These are application source files you wish to compile directly into your app that may be provided from\na third-party such a an SDK from a manufacturer or a useful helper library from an open-source project.")),(0,r.kt)("h2",{id:"adding-new-source-files-via-ceedling"},"Adding new source files via ",(0,r.kt)("strong",{parentName:"h2"},"Ceedling")),(0,r.kt)("p",null,"Using the Ceedling tool to add new source files will not only add a new source file to the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/")," folder but it will also add a new unit-test source file\nwithin the ",(0,r.kt)("inlineCode",{parentName:"p"},"test/")," folder. To add a new source and unit-test file execute the following (Don't include a .c or .h in the filename)"),(0,r.kt)("admonition",{title:"Linux Users",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ceedling")," gem does not work well when used with the ",(0,r.kt)("inlineCode",{parentName:"p"},"zsh")," interpreter. Instead try executing ",(0,r.kt)("inlineCode",{parentName:"p"},"bash")," before\nadding new source via ceedling.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"ceedling module:create[FILENAME]\n")),(0,r.kt)("p",null,"Once the new source & unit-test file is created, don't forget to add the newly created ",(0,r.kt)("inlineCode",{parentName:"p"},"src/*.c")," file to the ",(0,r.kt)("inlineCode",{parentName:"p"},"APP_SRC")," variable in ",(0,r.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")),(0,r.kt)("h2",{id:"initial-build-setup"},"Initial Build Setup"),(0,r.kt)("p",null,"After a fresh clone of your project the ",(0,r.kt)("inlineCode",{parentName:"p"},"setup")," script can be used to initialize the CMake build directory"),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"ubuntu",label:"Ubuntu",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"./setup.sh\n"))),(0,r.kt)(i.Z,{value:"windows",label:"Windows",mdxType:"TabItem"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you have never ran powershell scripts on your machine before, you will likely need to allow remote signed scripts. To do so open Poweshell as an administrator and execute the following. Once complete the ",(0,r.kt)("inlineCode",{parentName:"p"},"setup")," script should be run from Powershell"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-console"},"set-executionpolicy remotesigned\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"setup.ps1\n")))),(0,r.kt)("h2",{id:"compiling-flashing--testing"},"Compiling, Flashing & Testing"),(0,r.kt)("p",null,"Once a ",(0,r.kt)("inlineCode",{parentName:"p"},"build/")," directory has been initialized the following ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," commands can be run from the ",(0,r.kt)("inlineCode",{parentName:"p"},"build/")," folder"),(0,r.kt)("h4",{id:"compiling"},"Compiling"),(0,r.kt)("p",null,"To clean the build directory and compile a fresh build:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make clean\n")),(0,r.kt)("p",null,"To compile the source:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make -j8\n")),(0,r.kt)("h4",{id:"flashing"},"Flashing"),(0,r.kt)(o.Z,{groupId:"prog-type",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"programmer",label:"avr-dude / ISP programmer",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"To erase the connected target:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make erase\n")),(0,r.kt)("p",null,"To flash the connected target:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make flash\n")),(0,r.kt)("h4",{id:"fuses"},"Fuses"),(0,r.kt)("p",null,"To write the fuses:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make write_fuses\n")),(0,r.kt)("p",null,"To read the fuses:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make read_fuses\n"))),(0,r.kt)(i.Z,{value:"dfu",label:"USB DFU",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"Heads up",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"USB DFU commands require your board to be running a DFU bootloader."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"atmega32u4_breakout users:")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Read ",(0,r.kt)("a",{parentName:"li",href:"/docs/atmega32u4_breakout/advanced-guides/utilizing-dfu-bootloader"},"this Advanced guide")," to learn how to enter the USB DFU bootloader so it can receive commands\nover USB"),(0,r.kt)("li",{parentName:"ul"},"If your board is empty or flashed with the Arduino bootloader - check out ",(0,r.kt)("a",{parentName:"li",href:"/docs/atmega32u4_breakout/advanced-guides/flashing-dfu-bootloader"},"this Advanced guide")," on flashing the DFU bootloader."))),(0,r.kt)("p",null,"To erase the connected target:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make dfu_erase\n")),(0,r.kt)("p",null,"To flash the connected target:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make dfu_flash\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You must manually reset the microcontroller after reflashing via DFU to launch the newly programmed application.")))),(0,r.kt)("h4",{id:"testing"},"Testing"),(0,r.kt)("p",null,"To execute unit tests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make test\n")),(0,r.kt)("h2",{id:"continuous-integrationdeployment"},"Continuous Integration/Deployment"),(0,r.kt)("p",null,"The template takes advantage of the Github Workflows capability and will continuously build and execute unit-tests\nagainst your firmware when pushed to a Github repository. To utilize these workflows a certain developers strategy must\nbe followed. All development should be done out of a ",(0,r.kt)("inlineCode",{parentName:"p"},"develop")," branch. New features/branches should be made from this branch\nand then merged back upon completion. When the developer is ready to create an official release, they would initiate a PR from\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"develop")," branch into the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," branch. This gives a clear seperation between what is released and under active\ndevelopment. That being said, there are two integration used in this process and the configuration can be found within the\n",(0,r.kt)("inlineCode",{parentName:"p"},".github/workflows/")," folder."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"ci.yml")),": The continuous integration (",(0,r.kt)("strong",{parentName:"li"},"ci"),") config will build the application firmware and execute\nunit-tests on every pull-request into a branch named ",(0,r.kt)("inlineCode",{parentName:"li"},"develop")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"main"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"release.yml")),": The release integration will not only build and test the firmware but it will also tag the git commit\nwith a tag matching the version found in ",(0,r.kt)("inlineCode",{parentName:"li"},"src/version.h")," and create a Github Release with the final binaries, source code and\nunit-test results attached to it. This integration is triggered on every commit to the ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," branch.")),(0,r.kt)("admonition",{title:"Next steps",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"With your project set up you're ready to start developing! If you have a fresh/empty board or one with the Arduino bootloader loaded\ncheckout this Advanced guide on ",(0,r.kt)("a",{parentName:"p",href:"/docs/atmega32u4_breakout/advanced-guides/flashing-dfu-bootloader"},"flashing the DFU bootloader")," - the DFU\nbootloader makes it quick and easy to flash your ",(0,r.kt)("inlineCode",{parentName:"p"},"bare-metal")," applications using a single USB cable and the DFU ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," commands.")))}h.isMDXComponent=!0}}]);