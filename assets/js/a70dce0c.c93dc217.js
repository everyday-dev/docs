"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2715],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>k});var a=n(7462),r=n(7294),o=n(6010),i=n(2466),l=n(6550),s=n(1980),u=n(7392),p=n(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=h({queryString:n,groupId:a}),[c,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),b=(()=>{const e=s??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,o]),tabValues:o}}var b=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),a=u[n].value;a!==l&&(c(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},i,{className:(0,o.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function k(e){const t=(0,b.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},4574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),i=n(5162);const l={title:"DEV101 \u26a1 Adding applications to the PATH env variable",authors:"stephen",tags:["dev101"],keywords:["dev101","guides","PATH","environment variables","how to","linux","windows","powershell"],description:"Guide on how to add applications to the path environment variable so you can access them from the command line"},s=void 0,u={permalink:"/blog/2023/1/7/adding-apps-to-path-var",source:"@site/blog/2023-1-7-adding-apps-to-path-var.mdx",title:"DEV101 \u26a1 Adding applications to the PATH env variable",description:"Guide on how to add applications to the path environment variable so you can access them from the command line",date:"2023-01-07T00:00:00.000Z",formattedDate:"January 7, 2023",tags:[{label:"dev101",permalink:"/blog/tags/dev-101"}],readingTime:5.315,hasTruncateMarker:!0,authors:[{name:"Stephen Murphy",title:"Founder",url:"https://github.com/stephendpmurphy",imageURL:"/img/profile.jpeg",key:"stephen"}],frontMatter:{title:"DEV101 \u26a1 Adding applications to the PATH env variable",authors:"stephen",tags:["dev101"],keywords:["dev101","guides","PATH","environment variables","how to","linux","windows","powershell"],description:"Guide on how to add applications to the path environment variable so you can access them from the command line"},prevItem:{title:"DEV101 \u26a1 Creating user interaction animations",permalink:"/blog/2023/1/10/creating-user-interaction-animations"},nextItem:{title:"New releases \ud83c\udf89 (kicad & avr templates, breakout boards)",permalink:"/blog/2022/12/28/new-releases"}},p={authorsImageUrls:[void 0]},c=[],d={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"It often occurs in a developers day that they need to install a new application and be able to access it from the command line. In most cases a nicely packaged\ninstaller (",(0,r.kt)("inlineCode",{parentName:"p"},".msi"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".exe")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".AppImage"),") is there to handle this process for you along with setting up directories and default config, all with a few clicks through a GUI.\nSame goes for installing packages via a package manger like ",(0,r.kt)("inlineCode",{parentName:"p"},"apt")," for Ubuntu or ",(0,r.kt)("inlineCode",{parentName:"p"},"choco")," for Windows. A single command and the process is done."),(0,r.kt)("p",null,"Although this is incredibly convenient, not all applications ship with an installer.",' You may encounter application directories that have been "zipped" or "tar-balled" and once\nextracted gives you access to the application and dependencies when executed from its current home. When you receive a compressed folder like this it might just be\nthe needed app inside or there may be a folder within called ',(0,r.kt)("inlineCode",{parentName:"p"},"bin")," which contains your app. The easiest way to make the app accessible from the CLI is to add\nthe folder path containing it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," environment variable. By adding the app directory to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," env. variable, we build a list of directories that are searched any time an\napp is called from the command line. The few steps below will walk you through doing this in both Linux and Windows."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"As an example, we are going to install the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dfu-programmer/dfu-programmer/releases/tag/v1.0.0"},"dfu-programmer")," CLI which allows a user to reflash\nAtmel AVR microcontrollers via the USB-DFU class. The contents or use of the application is not important here but rather the process. If you'd like to follow along installing\na different application, feel free to do so.")),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"ubuntu",label:"Ubuntu",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"To begin, place the uncompressed app folder wherever you'd like on the filesystem. Typically when installing applications in this manner,\nyou would place the application in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/local")," folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"sudo mv dfu-programmer/ /usr/local/dfu-programmer\n")),(0,r.kt)("p",null,"If we ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," the app directory, we find the ",(0,r.kt)("inlineCode",{parentName:"p"},"dfu-progammer")," executable. You may have another layer with a ",(0,r.kt)("inlineCode",{parentName:"p"},"bin")," folder within that then contains your executable you want to\nexecute. Regardless of where the application actually lives we want to add the full path to its storage location, to our PATH env variable. To do so, edit the ",(0,r.kt)("inlineCode",{parentName:"p"},".bashrc")," file located in your home directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vi ~/.bashrc\n")),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},".bashrc")," file open - Add the following line anywhere in the file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export PATH=/usr/local/dfu-programmer:$PATH\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"When adding the export statements you should use the path to the folder that contains the executable and should not include the executable name.")),(0,r.kt)("p",null,"The above line pre-pends the path to our dfu-programmer directory to the current ",(0,r.kt)("inlineCode",{parentName:"p"},"$PATH")," env variable and then assigns that new list back to itself (",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),"). This rc file we just edited is\nloaded every time a terminal is opened and the line we added will let our current shell know about the ",(0,r.kt)("inlineCode",{parentName:"p"},"dfu-programmer")," location. To re-iterate, this line adds to the enviroment variable\nand does not overwrite it. This means if we have multiple applications to install in this manner, we can have multiple export statements one after another that will not overwrite one another."),(0,r.kt)("p",null,"To test if our changes worked, source the rc file - making our current shell aware of the new directory we've added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," environment variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"source ~/.bashrc\n")),(0,r.kt)("p",null,"Now try and execute our application from any directory on the file system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"cd ~\ndfu-programmer --version\n")),(0,r.kt)("p",null,"If we were succesfull then we should see a version string of 1.0.0 printed on the console."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"dfu-programmer 1.0.0\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If the above did not work and you see something like ",(0,r.kt)("inlineCode",{parentName:"p"},"Command X not found, did you mean:"),", verify that the full path to the folder containing your executable was properly added to the\n",(0,r.kt)("inlineCode",{parentName:"p"},".bashrc")," file. To guarantee the new rc file is being sourced you can close your terminal, open a new one and try the command again."))),(0,r.kt)(i.Z,{value:"windows",label:"Windows",mdxType:"TabItem"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"All of the commands in this guide are executed from a Powershell terminal.")),(0,r.kt)("p",null,"To begin, place the uncompressed app folder wherever you'd like on the filesystem. Typically when installing applications in this manner, I like to place the app folder in my root ",(0,r.kt)("inlineCode",{parentName:"p"},"C:\\"),"\ndirectory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"mv dfu-programmer-x64-1.0.0 C:\\\n")),(0,r.kt)("p",null,"If we ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," the app directory, we find the ",(0,r.kt)("inlineCode",{parentName:"p"},"dfu-progammer.exe")," executable inside. You may have another layer with a ",(0,r.kt)("inlineCode",{parentName:"p"},"bin")," folder within that then contains your executable you want to\nexecute. Regardless of where the application actually lives we want to add the full path to its storage location, to our PATH env variable. To do so, execute the following from Powershell."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Powershell"},'# Add to the current users path\nsetx PATH "%PATH%;C:\\dfu-programmer-x64-1.0.0"\n\n# Add to all users path. Will require the PS to be ran as Administrator\n# Start a new powershell as administrator\nStart-process powershell -verb runas\nsetx /M PATH "%PATH%;C:\\dfu-programmer-x64-1.0.0"\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"When adding to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," env variable you should use the path to the folder that contains the executable and should not include the executable name.")),(0,r.kt)("p",null,"The above line appends the path to our dfu-programmer directory to the ",(0,r.kt)("inlineCode",{parentName:"p"},"%PATH%")," env variable and then assigns that new list back to itself (",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),"). To re-iterate, this command adds to\nthe enviroment variable and does not overwrite it."),(0,r.kt)("p",null,"In order for the ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," changes to take effect we need to close our current terminal and open a new one. Once the new terminal is open try and execute our application from any\ndirectory on the file system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"cd ~\ndfu-programmer --version\n")),(0,r.kt)("p",null,"If we were succesfull then we should see a version string of 1.0.0 printed on the console."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"dfu-programmer 1.0.0\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If the above did not work and you see something like ",(0,r.kt)("inlineCode",{parentName:"p"},"X : The term 'X' is not recognized as the name of a cmdlet, function, script file, or operable\nprogram."),", verify that the full path to the folder containing your executable was properly added. You can verify what was added by typing ",(0,r.kt)("inlineCode",{parentName:"p"},"$env:Path")," into Powershell. Your app directory\nshould be one of the last in the list of directories printed.")))),(0,r.kt)("p",null,"That's it! You now have access to your application via the command line and are ready to integrate the new app into your automation or general workflows."))}h.isMDXComponent=!0}}]);