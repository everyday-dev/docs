"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8616],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var r=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=u(a),c=o,h=p["".concat(l,".").concat(c)]||p[c]||m[c]||n;return a?r.createElement(h,i(i({ref:t},s),{},{components:a})):r.createElement(h,i({ref:t},s))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,i=new Array(n);i[0]=c;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d[p]="string"==typeof e?e:o,i[1]=d;for(var u=2;u<n;u++)i[u]=a[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6059:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>n,metadata:()=>d,toc:()=>u});var r=a(7462),o=(a(7294),a(3905));const n={title:"Flashing the USB DFU bootloader",sidebar_position:2,slug:"/atmega32u4_breakout/advanced-guides/flashing-dfu-bootloader",keywords:["atmega32u4","breadboard","prototyping","oshw","hardware","kicad","debugging","avr","usb","dfu","usb-dfu"],description:"Guide on how to flash the bare-metal USB DFU bootloader onto the atmega32u4 breakout board by everyday\u26a1dev"},i=void 0,d={unversionedId:"hardware/atmega32u4-breakout/advanced-guides/bare-metal",id:"hardware/atmega32u4-breakout/advanced-guides/bare-metal",title:"Flashing the USB DFU bootloader",description:"Guide on how to flash the bare-metal USB DFU bootloader onto the atmega32u4 breakout board by everyday\u26a1dev",source:"@site/docs/hardware/atmega32u4-breakout/advanced-guides/bare-metal.mdx",sourceDirName:"hardware/atmega32u4-breakout/advanced-guides",slug:"/atmega32u4_breakout/advanced-guides/flashing-dfu-bootloader",permalink:"/docs/atmega32u4_breakout/advanced-guides/flashing-dfu-bootloader",draft:!1,editUrl:"https://github.com/everyday-dev/opensource/tree/main/docs/hardware/atmega32u4-breakout/advanced-guides/bare-metal.mdx",tags:[],version:"current",lastUpdatedBy:"stephendpmurphy",lastUpdatedAt:1687821463,formattedLastUpdatedAt:"Jun 26, 2023",sidebarPosition:2,frontMatter:{title:"Flashing the USB DFU bootloader",sidebar_position:2,slug:"/atmega32u4_breakout/advanced-guides/flashing-dfu-bootloader",keywords:["atmega32u4","breadboard","prototyping","oshw","hardware","kicad","debugging","avr","usb","dfu","usb-dfu"],description:"Guide on how to flash the bare-metal USB DFU bootloader onto the atmega32u4 breakout board by everyday\u26a1dev"},sidebar:"sidebar",previous:{title:"Flashing the Arduino Bootloader",permalink:"/docs/atmega32u4_breakout/advanced-guides/flashing-arduino-bootloader"},next:{title:"Utilizing the USB DFU bootloader",permalink:"/docs/atmega32u4_breakout/advanced-guides/utilizing-dfu-bootloader"}},l={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Writing the fuses",id:"writing-the-fuses",level:2},{value:"Flashing the USB-DFU bootloader",id:"flashing-the-usb-dfu-bootloader",level:2}],s={toc:u},p="wrapper";function m(e){let{components:t,...a}=e;return(0,o.kt)(p,(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"If you have an atmega32u4 breakout board with the ",(0,o.kt)("inlineCode",{parentName:"p"},"Arduino")," bootloader (or empty flash) and would like to use the board with the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/everyday-dev/avr-cmake-template"},"avr-cmake-template"),"\nand/or ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dfu-programmer/dfu-programmer"},"dfu-programmer")," to flash your applications using just a USB cable, we will need to do a couple different things.\nTo begin you will need to gather the necessary tools outlined in the Prerequisite section."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"You will need the following tools to write the USB DFU bootloader"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/avrdudes/avrdude"},"avrdude")),(0,o.kt)("li",{parentName:"ul"},"AVR ISP programmer (1x of the following)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.amazon.com/Programmer-USB-AVRISP-XPII-Compatible/dp/B00KM6ZA9I/ref=sr_1_4?crid=2E8DSYQHJD8S8&keywords=avrisp+mkii&qid=1672774084&s=electronics&sprefix=avrisp+mkii%2Celectronics%2C78&sr=1-4"},"AVRISP MKII programmer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.microchip.com/en-us/development-tool/ATATMEL-ICE"},"Atmel ICE")),(0,o.kt)("li",{parentName:"ul"},"Arduino running the ",(0,o.kt)("inlineCode",{parentName:"li"},"Arduino ISP")," example sketch")))),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"If you use an Arduino as an ISP programmer, make sure it is an Arduino with 3.3V logic levels. An Arduino Uno, for example, will not work as it runs a 5V logic level and can cause\ndamage to the atmega32u4 pins.")),(0,o.kt)("h2",{id:"writing-the-fuses"},"Writing the fuses"),(0,o.kt)("p",null,"When using the DFU bootloader we recommend setting the fuses to immediately boot the user application at address ",(0,o.kt)("inlineCode",{parentName:"p"},"0x0000")," and to enter the DFU bootloader you initiate\nthe boot reset sequence using the ",(0,o.kt)("inlineCode",{parentName:"p"},"nRST")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"HWB")," pins. To apply this methodology we need to set two fuses - the ",(0,o.kt)("inlineCode",{parentName:"p"},"BOOTRST")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"HWBE"),"\nfuses. We need to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"BOOTRST")," fuse to be unprogammed (",(0,o.kt)("inlineCode",{parentName:"p"},"1b"),") which causes the MCU to start executing at address ",(0,o.kt)("inlineCode",{parentName:"p"},"0x0000"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"HWBE")," fuse needs to be\nprogrammed (",(0,o.kt)("inlineCode",{parentName:"p"},"0b"),") which allows us to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"E2 / HWB")," GPIO to conditionally execute starting at the bootloader address (default address of ",(0,o.kt)("inlineCode",{parentName:"p"},"0x3800"),")."),(0,o.kt)("p",null,"The remaining fuses such as clock speed, brown-out detection level, etc can be set as the application needs. We recommend using the ",(0,o.kt)("a",{parentName:"p",href:"https://www.engbedded.com/fusecalc/"},"AVR Fuse Calculator"),"\nto configure your fuses with an easy to use GUI."),(0,o.kt)("p",null,"The fuse settings below are the recommended values for the ",(0,o.kt)("inlineCode",{parentName:"p"},"atmegaXu4_breakout")," board. To write the fuses you need to connect the 6pin ISP header to your programmer and then execute the following via CLI (The below uses the Atmel ICE programmer). Remember\nto replace the low, high and extended fuse values with your needed fuse values."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"avrdude -p atmega32u4 -c atmelice_isp -U lfuse:w:0xce:m -U hfuse:w:0x99:m -U efuse:w:0xc3:m\n")),(0,o.kt)("h2",{id:"flashing-the-usb-dfu-bootloader"},"Flashing the USB-DFU bootloader"),(0,o.kt)("p",null,"To write the USB-DFU bootloader we need to retrieve the ",(0,o.kt)("inlineCode",{parentName:"p"},".hex")," from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/everyday-dev/megaAVR_USB_DFU_firmware"},"this Github repository"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},".hex"),"\nimage is also available on Microchips site, but we've stored it in a Github repository just in case Microchips site is down or the image is removed in the future. Once cloned\nwe can flash the bootloader image."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"avrdude -p atmega32u4 -c atmelice_isp -U flash:w:ATMega32U4-usbdevice_dfu-1_0_0.hex:h\n")),(0,o.kt)("admonition",{title:"Next steps",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"With the bootloader flashed, we're ready to upload an application via USB. We have a seperate guide for initiating and ",(0,o.kt)("a",{parentName:"p",href:"utilizing-dfu-bootloader"},"utilizing the DFU bootloader here"))))}m.isMDXComponent=!0}}]);